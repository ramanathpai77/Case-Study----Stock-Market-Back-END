// <auto-generated />
using System;
using ComapnyInformation.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComapnyInformation.Migrations
{
    [DbContext(typeof(DemoContext))]
    [Migration("20201212143308_m2")]
    partial class m2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ComapnyInformation.Entities.Company", b =>
                {
                    b.Property<string>("CCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LInSE")
                        .HasColumnType("bit");

                    b.Property<int>("SEId")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<double>("Turnover")
                        .HasColumnType("float");

                    b.HasKey("CCode");

                    b.HasIndex("SEId");

                    b.HasIndex("SectorId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("ComapnyInformation.Entities.IPOs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PricePerShare")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalNoShares")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IPOs");
                });

            modelBuilder.Entity("ComapnyInformation.Entities.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SectorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectorId");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("ComapnyInformation.Entities.StockExchange", b =>
                {
                    b.Property<int>("SEId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SEName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SEId");

                    b.ToTable("StockExchange");
                });

            modelBuilder.Entity("ComapnyInformation.Entities.StockPrice", b =>
                {
                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrentPrice")
                        .HasColumnType("int");

                    b.Property<int>("SEId")
                        .HasColumnType("int");

                    b.HasKey("datetime");

                    b.HasIndex("CompanyCode");

                    b.HasIndex("SEId");

                    b.ToTable("StockPrice");
                });

            modelBuilder.Entity("ComapnyInformation.Entities.Company", b =>
                {
                    b.HasOne("ComapnyInformation.Entities.StockExchange", "se")
                        .WithMany()
                        .HasForeignKey("SEId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComapnyInformation.Entities.Sector", "sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("se");

                    b.Navigation("sector");
                });

            modelBuilder.Entity("ComapnyInformation.Entities.StockPrice", b =>
                {
                    b.HasOne("ComapnyInformation.Entities.Company", "cc")
                        .WithMany()
                        .HasForeignKey("CompanyCode");

                    b.HasOne("ComapnyInformation.Entities.StockExchange", "se")
                        .WithMany()
                        .HasForeignKey("SEId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cc");

                    b.Navigation("se");
                });
#pragma warning restore 612, 618
        }
    }
}
